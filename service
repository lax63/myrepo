// Write your logic here
		List<ProductDTO> productDTOList = new ArrayList<ProductDTO>();
		Iterable<Product> productList = productRepository.findAll();
		
		for(Product p : productList) {
			ProductDTO productDTO = new ProductDTO();
			productDTO.setAvailableQuantity(p.getAvailableQuantity());
			productDTO.setBrand(p.getBrand());
			productDTO.setCategory(p.getCategory());
			productDTO.setDescription(p.getDescription());
			productDTO.setName(p.getName());
			productDTO.setPrice(p.getPrice());
			productDTO.setProductId(p.getProductId());
			productDTOList.add(productDTO);
		}
		
		return productDTOList;
    
    //getProductById
    Optional<Product> product = productRepository.findById(productId);
		if(product.isEmpty()) {
			throw new EKartProductException("ProductService.PRODUCT_NOT_AVAILABLE");
		}
		Product p = new Product();
		ProductDTO productDTO = new ProductDTO();
		productDTO.setAvailableQuantity(p.getAvailableQuantity());
		productDTO.setBrand(p.getBrand());
		productDTO.setCategory(p.getCategory());
		productDTO.setDescription(p.getDescription());
		productDTO.setName(p.getName());
		productDTO.setPrice(p.getPrice());
		productDTO.setProductId(p.getProductId());
		
		return productDTO;
		
		
		
		//Api
		
		List<ProductDTO> productDTOList = customerProductService.getAllProducts();
		String message = environment.getProperty("{ProductService.PRODUCT_NOT_AVAILABLE}");
		logger.info(message);
		return new ResponseEntity<List<ProductDTO>>(productDTOList,HttpStatus.OK);
		
		//getbyid
		ProductDTO productDTO = customerProductService.getProductById(productId);
		String message = environment.getProperty("{ProductService.PRODUCT_NOT_AVAILABLE}");
		logger.info(message);
		return new ResponseEntity<ProductDTO>(productDTO,HttpStatus.OK);
		
		//reduce
		customerProductService.reduceAvailableQuantity(productId, quantity);
		String message = environment.getProperty("{ProductAPI.REDUCE_QUANTITY_SUCCESSFULL}");
		logger.info(message);
		return new ResponseEntity<String>(message,HttpStatus.OK);
    
    
    
    //reduce Quantity
    
    Optional<Product> product = productRepository.findById(productId);
		if(product.isEmpty()) {
			throw new EKartProductException("ProductService.PRODUCT_NOT_AVAILABLE");
		}
		Product p = product.get();
		p.setAvailableQuantity(p.getAvailableQuantity() - productId);
		productRepository.save(p);
